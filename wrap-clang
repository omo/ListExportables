#!/usr/bin/env python
# Copyright (C) 2011 Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os, re, sys, subprocess

clang_dir = os.environ["MY_CLANG_DIR"]
clang   = os.path.join(clang_dir, "bin/clang")
clangxx = os.path.join(clang_dir, "bin/clang++")
plugin_lib = os.path.join(clang_dir, "lib/libListExportables.dylib")
plugin_name = "list-exp"
clang_plugin_options = ["-load", plugin_lib, "-add-plugin", plugin_name]

def cleanup_args(args):
    return args

def find_input_file(args):
    for i in args:
        if (re.search(r'\.(cpp|c|mm|m|cc)$', i)):
            return i
    # Pre-compiled headers are also given.
    for i in args:
        if (re.search(r'\.h$', i)):
            return i
    return None

def make_dest_filename(input_file):
    # XXX: maybe we should pick somewhere near from output file.
    out_dir = os.environ["MY_OUT_DIR"]
    source = find_input_file(args)
    return os.path.join(out_dir, os.path.basename(input_file) + ".l2s")

def select_clang(input_file):
    if not input_file:
        return clangxx # linker, precompiler
    if (re.search(r'\.(cpp|mm|cc)$', input_file)):
        return clangxx
    if (re.search(r'\.(c|m)$', input_file)):
        return clang
    return clang


args = cleanup_args(sys.argv[1:])
input_file = find_input_file(args)
todays_clang = select_clang(input_file)

if (not todays_clang) or (sys.argv[-1] == "/dev/null") or (sys.argv.count('-framework')):
    # This invocation is for path auto-detection or linking.
    sys.exit(os.system(" ".join([todays_clang] + sys.argv[1:])))

command_prefix = [todays_clang] + reduce(lambda a, x: a.append("-Xclang") or a.append(x) or a, clang_plugin_options, [])
command_tokens = command_prefix + args
#sys.stderr.write(repr(command_tokens) + "\n")
proc = subprocess.Popen(command_tokens, stdout=subprocess.PIPE)

dest = make_dest_filename(input_file)
out = open(dest, "w")
for line in proc.stdout:
    out.write(line)
out.close()
